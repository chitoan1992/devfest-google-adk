"""
Multi-Tool Agent System with Google ADK
Based on: Building your first Agent workshop (GDG DevFest Danang 2025)

This demonstrates:
1. Single agent with tools (Weather Agent)
2. Multi-agent team with automatic delegation
3. Session management and conversation flow
"""

import os
from typing import Optional
from google.adk.agents import Agent
from google.adk.sessions import InMemorySessionService
from google.adk.runners import Runner
from google.genai import types


# ============================================================================
# STEP 1: Define Tools
# ============================================================================

def get_weather(city: str) -> dict:
    """L·∫•y b√°o c√°o th·ªùi ti·∫øt hi·ªán t·∫°i cho m·ªôt th√†nh ph·ªë.

    Args:
        city: T√™n th√†nh ph·ªë (VD: "H√† N·ªôi", "London", "Tokyo")

    Returns:
        dict: {'status': 'success'|'error', 'report': str} ho·∫∑c {'error_message': str}
    """
    city_normalized = city.lower().replace(" ", "")

    # Mock weather database
    mock_weather_db = {
        "hanoi": {"status": "success", "report": "‚òÄÔ∏è H√† N·ªôi: N·∫Øng ƒë·∫πp, 25¬∞C"},
        "h√†n·ªôi": {"status": "success", "report": "‚òÄÔ∏è H√† N·ªôi: N·∫Øng ƒë·∫πp, 25¬∞C"},
        "london": {"status": "success", "report": "‚òÅÔ∏è London: Nhi·ªÅu m√¢y, 15¬∞C"},
        "tokyo": {"status": "success", "report": "üåßÔ∏è Tokyo: M∆∞a nh·∫π, 18¬∞C"},
    }

    if city_normalized in mock_weather_db:
        return mock_weather_db[city_normalized]
    else:
        return {
            "status": "error",
            "error_message": f"Xin l·ªói, kh√¥ng c√≥ th√¥ng tin th·ªùi ti·∫øt cho '{city}'."
        }


def say_hello(name: Optional[str] = None) -> str:
    """Cung c·∫•p l·ªùi ch√†o th√¢n thi·ªán.

    Args:
        name: T√™n ng∆∞·ªùi c·∫ßn ch√†o (optional)

    Returns:
        str: Message ch√†o h·ªèi
    """
    if name:
        return f"üëã Xin ch√†o, {name}!"
    else:
        return "üëã Xin ch√†o!"


def say_goodbye() -> str:
    """Cung c·∫•p message t·∫°m bi·ªát."""
    return "üëã T·∫°m bi·ªát! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! ‚ú®"


# ============================================================================
# STEP 2: Define Specialized Sub-Agents
# ============================================================================

AGENT_MODEL = "gemini-2.5-flash"

# Greeting Agent
greeting_agent = Agent(
    model=AGENT_MODEL,
    name="greeting_agent",
    instruction="Nhi·ªám v·ª• DUY NH·∫§T: Ch√†o h·ªèi th√¢n thi·ªán. "
                "D√πng tool 'say_hello'. "
                "N·∫øu user cung c·∫•p t√™n, truy·ªÅn cho tool. "
                "KH√îNG l√†m g√¨ kh√°c.",
    description="X·ª≠ l√Ω greetings s·ª≠ d·ª•ng 'say_hello'.",
    tools=[say_hello],
)

# Weather Agent (can be used standalone or as sub-agent)
weather_agent = Agent(
    name="weather_agent",
    model=AGENT_MODEL,
    description="Cung c·∫•p th√¥ng tin th·ªùi ti·∫øt cho c√°c th√†nh ph·ªë.",
    instruction="B·∫°n l√† tr·ª£ l√Ω th·ªùi ti·∫øt. "
                "Khi user h·ªèi v·ªÅ th·ªùi ti·∫øt, d√πng tool 'get_weather'. "
                "N·∫øu tool l·ªói, th√¥ng b√°o l·ªãch s·ª±. "
                "N·∫øu th√†nh c√¥ng, tr√¨nh b√†y b√°o c√°o r√µ r√†ng.",
    tools=[get_weather],
)

# Farewell Agent
farewell_agent = Agent(
    model=AGENT_MODEL,
    name="farewell_agent",
    instruction="Nhi·ªám v·ª• DUY NH·∫§T: T·∫°m bi·ªát l·ªãch s·ª±. "
                "D√πng tool 'say_goodbye' khi user n√≥i bye/t·∫°m bi·ªát. "
                "KH√îNG l√†m g√¨ kh√°c.",
    description="X·ª≠ l√Ω farewells s·ª≠ d·ª•ng 'say_goodbye'.",
    tools=[say_goodbye],
)


# ============================================================================
# STEP 3: Define Root Agent with Multi-Agent Team
# ============================================================================

root_agent = Agent(
    name="weather_assistant_team",
    model=AGENT_MODEL,
    description="Agent ƒëi·ªÅu ph·ªëi: Weather requests + delegate greetings/farewells.",
    instruction="B·∫°n l√† Weather Agent ch√≠nh ƒëi·ªÅu ph·ªëi team. "
                "TR√ÅCH NHI·ªÜM CH√çNH: Cung c·∫•p th√¥ng tin th·ªùi ti·∫øt. "
                "D√πng 'get_weather' CH·ªà cho weather requests. "
                "\n\nSUB-AGENTS: "
                "1. 'greeting_agent': X·ª≠ l√Ω 'Hi', 'Xin ch√†o' ‚Üí DELEGATE "
                "2. 'farewell_agent': X·ª≠ l√Ω 'T·∫°m bi·ªát', 'Bye' ‚Üí DELEGATE "
                "\n\nPH√ÇN T√çCH query: "
                "- Greeting? ‚Üí delegate greeting_agent "
                "- Farewell? ‚Üí delegate farewell_agent "
                "- Weather? ‚Üí t·ª± x·ª≠ l√Ω v·ªõi get_weather "
                "- Kh√°c? ‚Üí ph·∫£n h·ªìi l·ªãch s·ª± ho·∫∑c n√≥i kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c",
    tools=[get_weather],
    sub_agents=[greeting_agent, farewell_agent]
)


# ============================================================================
# STEP 4: Helper Functions for Agent Interaction
# ============================================================================

async def call_agent_async(
    query: str,
    runner: Runner,
    user_id: str,
    session_id: str
) -> str:
    """
    G·ª≠i query ƒë·∫øn agent v√† tr·∫£ v·ªÅ response.

    Args:
        query: User's question/request
        runner: Runner instance
        user_id: User identifier
        session_id: Session identifier

    Returns:
        str: Agent's final response
    """
    content = types.Content(role='user', parts=[types.Part(text=query)])

    final_response_text = "‚ö†Ô∏è Agent kh√¥ng t·∫°o ra response."

    async for event in runner.run_async(
        user_id=user_id,
        session_id=session_id,
        new_message=content
    ):
        if event.is_final_response():
            if event.content and event.content.parts:
                final_response_text = event.content.parts[0].text
            elif event.actions and event.actions.escalate:
                final_response_text = f"‚ö†Ô∏è Agent escalated: {event.error_message or 'Kh√¥ng c√≥ message.'}"
            break

    return final_response_text


async def create_session_and_runner(
    agent: Agent,
    app_name: str = "Weather Agent Demo",
    user_id: str = "user_1",
    session_id: str = "session_001"
):
    """
    T·∫°o session service v√† runner cho agent.

    Args:
        agent: Agent instance to use
        app_name: Application name
        user_id: User identifier
        session_id: Session identifier

    Returns:
        tuple: (session_service, runner, user_id, session_id)
    """
    session_service = InMemorySessionService()

    session = await session_service.create_session(
        app_name=app_name,
        user_id=user_id,
        session_id=session_id
    )

    runner = Runner(
        agent=agent,
        app_name=app_name,
        session_service=session_service
    )

    return session_service, runner, user_id, session_id


# ============================================================================
# STEP 5: Example Usage
# ============================================================================

async def main():
    """
    Example conversation demonstrating:
    1. Automatic delegation to greeting_agent
    2. Weather query handling by root agent
    3. Automatic delegation to farewell_agent
    """
    print("=" * 60)
    print("ü§ñ Multi-Agent Weather Assistant Demo")
    print("=" * 60)

    # Setup
    _, runner, user_id, session_id = await create_session_and_runner(
        agent=root_agent,
        app_name="Weather Agent Team Demo"
    )

    # Test queries
    queries = [
        "Xin ch√†o!",
        "Th·ªùi ti·∫øt ·ªü H√† N·ªôi th·∫ø n√†o?",
        "C√≤n London th√¨ sao?",
        "C·∫£m ∆°n, t·∫°m bi·ªát!"
    ]

    for query in queries:
        print(f"\nüë§ User: {query}")
        response = await call_agent_async(query, runner, user_id, session_id)
        print(f"ü§ñ Agent: {response}")

    print("\n" + "=" * 60)
    print("‚úÖ Demo ho√†n th√†nh!")
    print("=" * 60)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
